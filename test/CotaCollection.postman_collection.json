{
	"info": {
		"_postman_id": "fe26906c-8f60-4d33-bc0d-544d3f8350e3",
		"name": "CotaCollection",
		"description": "Collection of API calls for COTA (Chelas Open TV Application).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "clean-indexes",
			"item": [
				{
					"name": "DeleteGroupsIndex",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUsersIndex",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteInvitesIndex",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_invites",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateGroupsIndex",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUsersIndex",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateInvitesIndex",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_invites",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_invites"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "auth-pre",
			"item": [
				{
					"name": "RegisterUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0dcd27fc-f739-4a98-a47d-8bdf4ce0c9e4",
								"exec": [
									"const jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"username\", `\\\"${jsonData.username}\\\"`)",
									"",
									"pm.test('Should register user.', function(){",
									"    const res = pm.response.json()",
									"    const req = JSON.parse(request.data)",
									"    pm.expect(res._id).to.be.a('string')",
									"    pm.expect(res.username).to.eql(req.username)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"matos\",\n\t\"password\": \"matospassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_AUTH_URL}}/register",
							"host": [
								"{{BASE_AUTH_URL}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "RegisterInvitee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0dcd27fc-f739-4a98-a47d-8bdf4ce0c9e4",
								"exec": [
									"const jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"invitee\", `\\\"${jsonData.username}\\\"`)",
									"",
									"pm.test('Should register user.', function(){",
									"    const res = pm.response.json()",
									"    const req = JSON.parse(request.data)",
									"    pm.expect(res._id).to.be.a('string')",
									"    pm.expect(res.username).to.eql(req.username)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"matosInvitee\",\n\t\"password\": \"inviteepassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_AUTH_URL}}/register",
							"host": [
								"{{BASE_AUTH_URL}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37aff6d7-9745-4554-bc3a-d00b3dce938b",
								"exec": [
									"pm.test('Should login.', function(){",
									"    const res = pm.response.json()",
									"    const req = JSON.parse(request.data)",
									"    pm.expect(res._id).to.be.a('string')",
									"    pm.expect(res.username).to.eql(req.username)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": {{username}},\n\t\"password\": \"matospassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_AUTH_URL}}/login",
							"host": [
								"{{BASE_AUTH_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a8f726f-740c-45f6-ae61-93717b089034",
								"exec": [
									"const jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"userID\", jsonData.user._id)",
									"",
									"pm.test('Should get session.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.isAuthenticated).to.eql(true)",
									"    pm.expect(res.user._id).to.be.a('string')",
									"    pm.expect(res.user.username).to.equal(environment.username.replace('\\\"', '').replace('\\\"', ''))",
									"    pm.expect(res.user._id).to.be.a('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_AUTH_URL}}/session",
							"host": [
								"{{BASE_AUTH_URL}}"
							],
							"path": [
								"session"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "GetGroupSeriesSorted",
					"item": [
						{
							"name": "CreateGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1650e6c-3123-4586-b8e5-f767e977585c",
										"exec": [
											"const jsonData = JSON.parse(responseBody)",
											"postman.setEnvironmentVariable(\"groupID\", jsonData._id)",
											"",
											"pm.test('Should return inserted group.', function(){",
											"    const res = pm.response.json()",
											"    const req = JSON.parse(request.data)",
											"    pm.expect(res._id).to.be.a('string')",
											"    pm.expect(res.name).to.eql(req.name)",
											"    pm.expect(res.description).to.eql(req.description)",
											"    pm.expect(res).to.have.a.property('series')",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Name\",\n\t\"description\": \"Description\"\n}"
								},
								"url": {
									"raw": "{{BASE_API_URL}}/groups",
									"host": [
										"{{BASE_API_URL}}"
									],
									"path": [
										"groups"
									]
								},
								"description": "Creates a group"
							},
							"response": []
						},
						{
							"name": "AddSerieToGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "761ce0db-5973-4b0c-98fe-f8e9d6258aa4",
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"",
											"pm.test('Should return group with serie added.', function() {",
											"    const res = pm.response.json()",
											"    const serie = res.series[res.series.length-1]",
											"    pm.expect(serie.name).to.be.a('string')",
											"    pm.expect(serie.id).to.be.a('number')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_API_URL}}/groups/{{groupID}}/series/{{serie1}}",
									"host": [
										"{{BASE_API_URL}}"
									],
									"path": [
										"groups",
										"{{groupID}}",
										"series",
										"{{serie1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddSerieToGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "761ce0db-5973-4b0c-98fe-f8e9d6258aa4",
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"",
											"pm.test('Should return group with serie added.', function() {",
											"    const res = pm.response.json()",
											"    const serie = res.series[res.series.length-1]",
											"    pm.expect(serie.name).to.be.a('string')",
											"    pm.expect(serie.id).to.be.a('number')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_API_URL}}/groups/{{groupID}}/series/{{serie2}}",
									"host": [
										"{{BASE_API_URL}}"
									],
									"path": [
										"groups",
										"{{groupID}}",
										"series",
										"{{serie2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddSerieToGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "761ce0db-5973-4b0c-98fe-f8e9d6258aa4",
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"",
											"pm.test('Should return group with serie added.', function() {",
											"    const res = pm.response.json()",
											"    const serie = res.series[res.series.length-1]",
											"    pm.expect(serie.name).to.be.a('string')",
											"    pm.expect(serie.id).to.be.a('number')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_API_URL}}/groups/{{groupID}}/series/{{serie3}}",
									"host": [
										"{{BASE_API_URL}}"
									],
									"path": [
										"groups",
										"{{groupID}}",
										"series",
										"{{serie3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddSerieToGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "761ce0db-5973-4b0c-98fe-f8e9d6258aa4",
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"",
											"pm.test('Should return group with serie added.', function() {",
											"    const res = pm.response.json()",
											"    const serie = res.series[res.series.length-1]",
											"    pm.expect(serie.name).to.be.a('string')",
											"    pm.expect(serie.id).to.be.a('number')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_API_URL}}/groups/{{groupID}}/series/{{serie4}}",
									"host": [
										"{{BASE_API_URL}}"
									],
									"path": [
										"groups",
										"{{groupID}}",
										"series",
										"{{serie4}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "AddSerieToGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "761ce0db-5973-4b0c-98fe-f8e9d6258aa4",
										"exec": [
											"var jsonData = JSON.parse(responseBody)",
											"",
											"pm.test('Should return group with serie added.', function() {",
											"    const res = pm.response.json()",
											"    const serie = res.series[res.series.length-1]",
											"    pm.expect(serie.name).to.be.a('string')",
											"    pm.expect(serie.id).to.be.a('number')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BASE_API_URL}}/groups/{{groupID}}/series/{{serie5}}",
									"host": [
										"{{BASE_API_URL}}"
									],
									"path": [
										"groups",
										"{{groupID}}",
										"series",
										"{{serie5}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetGroupSeriesSorted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c38a2b2-3a22-4584-ac20-71b87a65d67b",
										"exec": [
											"pm.test(\"Should return sorted and filtered series from a group\", function(){",
											"    const res = pm.response.json()",
											"    let lastVote = -1",
											"    res.forEach(function(serie){",
											"        if(lastVote == -1)",
											"            lastVote = serie.vote_average",
											"        pm.expect(serie.vote_average).to.be.at.most(lastVote)",
											"        pm.expect(serie.vote_average).to.be.at.most(parseFloat(environment.max))",
											"        pm.expect(serie.vote_average).to.be.at.least(parseFloat(environment.min))",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_API_URL}}/groups/{{groupID}}/series?min={{min}}&max={{max}}",
									"host": [
										"{{BASE_API_URL}}"
									],
									"path": [
										"groups",
										"{{groupID}}",
										"series"
									],
									"query": [
										{
											"key": "min",
											"value": "{{min}}"
										},
										{
											"key": "max",
											"value": "{{max}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GetPopular",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3afe8a60-d0d0-4b29-8ebb-c04ba4849cf3",
								"exec": [
									"pm.test(\"Should return sorted popular movies.\", function () {",
									"    const res = pm.response.json()",
									"    pm.expect(Object.keys(res).length).to.be.above(0)",
									"    res.forEach(function(movie){",
									"        pm.expect(movie.id).to.be.a('number')",
									"        pm.expect(movie.name).to.be.a('string')",
									"        pm.expect(movie.popularity).to.be.a('number')",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_API_URL}}/popular",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"popular"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchSerie",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e045112-9851-4602-ac87-0f77961be574",
								"exec": [
									"pm.test(\"Should a series.\", function () {",
									"    const res = pm.response.json()",
									"    pm.expect(res.id).to.be.a('number')",
									"    pm.expect(res.name).to.be.a('string')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_API_URL}}/tv/{{serie1}}",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"tv",
								"{{serie1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1650e6c-3123-4586-b8e5-f767e977585c",
								"exec": [
									"const jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"groupID\", jsonData._id)",
									"",
									"pm.test('Should return inserted group.', function(){",
									"    const res = pm.response.json()",
									"    const req = JSON.parse(request.data)",
									"    pm.expect(res._id).to.be.a('string')",
									"    pm.expect(res.name).to.eql(req.name)",
									"    pm.expect(res.description).to.eql(req.description)",
									"    pm.expect(res).to.have.a.property('series')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Name\",\n\t\"description\": \"Description\"\n}"
						},
						"url": {
							"raw": "{{BASE_API_URL}}/groups",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "Creates a group"
					},
					"response": []
				},
				{
					"name": "EditGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd902f12-07d4-4c26-8974-f6a99d82df34",
								"exec": [
									"pm.test('Should return edited group.', function(){",
									"    const res = pm.response.json()",
									"    const req = JSON.parse(request.data)",
									"    pm.expect(res._id).to.eql(environment.groupID)",
									"    pm.expect(res.description).to.eql(req.description)",
									"    pm.expect(res).to.have.a.property('series')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"DescriptionEdited\"\n}"
						},
						"url": {
							"raw": "{{BASE_API_URL}}/groups/{{groupID}}",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"groups",
								"{{groupID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35b3cb7b-b260-4f38-89f9-e2460d414ff6",
								"exec": [
									"pm.test(\"Should return all groups\", function(){",
									"    const res = pm.response.json()",
									"    res.forEach(function(group){",
									"      pm.expect(group._id).to.be.a('string')",
									"      pm.expect(group.name).to.exist",
									"      pm.expect(group.description).to.exist",
									"      pm.expect(group.series).to.exist",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_API_URL}}/groups",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a28ab700-418e-431f-86b1-0becb77b26db",
								"exec": [
									"pm.test('Should return the requested group.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res._id).to.be.a('string')",
									"    pm.expect(res.name).to.exist",
									"    pm.expect(res.description).to.exist",
									"    pm.expect(res).to.have.a.property('series')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_API_URL}}/groups/{{groupID}}",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"groups",
								"{{groupID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddSerieToGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "761ce0db-5973-4b0c-98fe-f8e9d6258aa4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test('Should return group with serie added.', function() {",
									"    const res = pm.response.json()",
									"    const serie = res.series[res.series.length-1]",
									"    pm.expect(serie.name).to.be.a('string')",
									"    pm.expect(serie.id).to.be.a('number')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{BASE_API_URL}}/groups/{{groupID}}/series/{{serie1}}",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"groups",
								"{{groupID}}",
								"series",
								"{{serie1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveSerieFromGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2448fbf-b8ce-4f78-b90a-b1f53e53df7d",
								"exec": [
									"pm.test('Should return group with serue removed.', function(){",
									"    const res = pm.response.json()",
									"    res.series.forEach(function(serie){",
									"        pm.expect(serie.name).to.not.eql(environment.serie)",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_API_URL}}/groups/{{groupID}}/series/{{serie1}}",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"groups",
								"{{groupID}}",
								"series",
								"{{serie1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55a5519a-06e7-4426-889c-0d3b194159d3",
								"exec": [
									"const jsonData = JSON.parse(responseBody)",
									"",
									"pm.test('Should delete group.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.message).to.have.string('Successful')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_API_URL}}/groups/{{groupID}}",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"groups",
								"{{groupID}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "invites",
			"item": [
				{
					"name": "CreateGroup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1650e6c-3123-4586-b8e5-f767e977585c",
								"exec": [
									"const jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"groupID\", jsonData._id)",
									"",
									"pm.test('Should return inserted group.', function(){",
									"    const res = pm.response.json()",
									"    const req = JSON.parse(request.data)",
									"    pm.expect(res._id).to.be.a('string')",
									"    pm.expect(res.name).to.eql(req.name)",
									"    pm.expect(res.description).to.eql(req.description)",
									"    pm.expect(res).to.have.a.property('series')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Name\",\n\t\"description\": \"Description\"\n}"
						},
						"url": {
							"raw": "{{BASE_API_URL}}/groups",
							"host": [
								"{{BASE_API_URL}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "Creates a group"
					},
					"response": []
				},
				{
					"name": "SendInvite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de559604-a8b8-4219-825b-683cbcce3507",
								"exec": [
									"pm.test('Should invite user.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.message).to.have.string('Successful')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_INVITE_URL}}/group/{{groupID}}/user/{{invitee}}",
							"host": [
								"{{BASE_INVITE_URL}}"
							],
							"path": [
								"group",
								"{{groupID}}",
								"user",
								"{{invitee}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetInvites",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a0776f2-d807-410f-b36b-56288c7eb688",
								"exec": [
									"const jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"inviteID\", jsonData.invites[0]._id)",
									"postman.setEnvironmentVariable(\"inviteeID\", jsonData.invites[0]._source.inviteeID)",
									"",
									"pm.test(\"Should return all invites.\", function(){",
									"    const res = pm.response.json()",
									"    res.invites.forEach(function(invite){",
									"      pm.expect(invite._source.inviterID).to.be.a('string')",
									"      pm.expect(invite._source.inviter).to.be.a('string')",
									"      pm.expect(invite._source.inviteeID).to.be.a('string')",
									"      pm.expect(invite._source.invitee).to.be.a('string')",
									"      pm.expect(invite._source.groupID).to.be.a('string')",
									"      pm.expect(invite._source.group).to.be.a('string')",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_INVITE_URL}}/invites",
							"host": [
								"{{BASE_INVITE_URL}}"
							],
							"path": [
								"invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogoutUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "136aa1e6-215d-43ea-8e25-49228c4d4990",
								"exec": [
									"pm.test('Should log out.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.message).to.have.string('Successful')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_AUTH_URL}}/logout",
							"host": [
								"{{BASE_AUTH_URL}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoginInvitee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37aff6d7-9745-4554-bc3a-d00b3dce938b",
								"exec": [
									"pm.test('Should login.', function(){",
									"    const res = pm.response.json()",
									"    const req = JSON.parse(request.data)",
									"    pm.expect(res._id).to.be.a('string')",
									"    pm.expect(res.username).to.eql(req.username)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": {{invitee}},\n\t\"password\": \"inviteepassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_AUTH_URL}}/login",
							"host": [
								"{{BASE_AUTH_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "AcceptInvite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80f9f6c3-4649-4d8e-a293-95bf7d2a5e12",
								"exec": [
									"pm.test('Should accept invite.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.message).to.have.string('Successful')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{BASE_INVITE_URL}}/accept/{{inviteID}}",
							"host": [
								"{{BASE_INVITE_URL}}"
							],
							"path": [
								"accept",
								"{{inviteID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogoutInvitee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "136aa1e6-215d-43ea-8e25-49228c4d4990",
								"exec": [
									"pm.test('Should log out.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.message).to.have.string('Successful')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_AUTH_URL}}/logout",
							"host": [
								"{{BASE_AUTH_URL}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoginUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37aff6d7-9745-4554-bc3a-d00b3dce938b",
								"exec": [
									"pm.test('Should login.', function(){",
									"    const res = pm.response.json()",
									"    const req = JSON.parse(request.data)",
									"    pm.expect(res._id).to.be.a('string')",
									"    pm.expect(res.username).to.eql(req.username)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": {{username}},\n\t\"password\": \"matospassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_AUTH_URL}}/login",
							"host": [
								"{{BASE_AUTH_URL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "KickInvitee",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ba3cdd7-b1f7-4b61-8b1b-e1373c629e62",
								"exec": [
									"pm.test('Should kick invitee.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.message).to.have.string('Successful')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{BASE_INVITE_URL}}/group/{{groupID}}/kick/{{inviteeID}}",
							"host": [
								"{{BASE_INVITE_URL}}"
							],
							"path": [
								"group",
								"{{groupID}}",
								"kick",
								"{{inviteeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SendInvite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de559604-a8b8-4219-825b-683cbcce3507",
								"exec": [
									"pm.test('Should invite user.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.message).to.have.string('Successful')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_INVITE_URL}}/group/{{groupID}}/user/{{invitee}}",
							"host": [
								"{{BASE_INVITE_URL}}"
							],
							"path": [
								"group",
								"{{groupID}}",
								"user",
								"{{invitee}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetInvites",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a0776f2-d807-410f-b36b-56288c7eb688",
								"exec": [
									"const jsonData = JSON.parse(responseBody)",
									"postman.setEnvironmentVariable(\"inviteID\", jsonData.invites[0]._id)",
									"postman.setEnvironmentVariable(\"inviteeID\", jsonData.invites[0]._source.inviteeID)",
									"",
									"pm.test(\"Should return all invites.\", function(){",
									"    const res = pm.response.json()",
									"    res.invites.forEach(function(invite){",
									"      pm.expect(invite._source.inviterID).to.be.a('string')",
									"      pm.expect(invite._source.inviter).to.be.a('string')",
									"      pm.expect(invite._source.inviteeID).to.be.a('string')",
									"      pm.expect(invite._source.invitee).to.be.a('string')",
									"      pm.expect(invite._source.groupID).to.be.a('string')",
									"      pm.expect(invite._source.group).to.be.a('string')",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_INVITE_URL}}/invites",
							"host": [
								"{{BASE_INVITE_URL}}"
							],
							"path": [
								"invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteInvite",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb27aa7f-d829-48b5-931a-be941e75073e",
								"exec": [
									"pm.test('Should delete invite.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.message).to.have.string('Successful')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_INVITE_URL}}/delete/{{inviteID}}",
							"host": [
								"{{BASE_INVITE_URL}}"
							],
							"path": [
								"delete",
								"{{inviteID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LogoutUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "136aa1e6-215d-43ea-8e25-49228c4d4990",
								"exec": [
									"pm.test('Should log out.', function(){",
									"    const res = pm.response.json()",
									"    pm.expect(res.message).to.have.string('Successful')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_AUTH_URL}}/logout",
							"host": [
								"{{BASE_AUTH_URL}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "clean-indexes",
			"item": [
				{
					"name": "DeleteGroupsIndex",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUsersIndex",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteInvitesIndex",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_invites",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_invites"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateGroupsIndex",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUsersIndex",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateInvitesIndex",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/cota_invites",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"cota_invites"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6a170de1-cfc4-4f49-b49d-aafbd06b1eb3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "51fa5c7b-f1cf-4286-b698-3b3ebbfeea10",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7a051693-43d2-4f5c-a8bf-a312247f0004",
			"key": "BASE_API_URL",
			"value": "http://localhost:8000/api",
			"type": "string"
		},
		{
			"id": "320374c9-9555-4ace-bc1a-047075e0f983",
			"key": "BASE_AUTH_URL",
			"value": "http://localhost:8000/auth",
			"type": "string"
		},
		{
			"id": "f5b1f80f-ba9c-4ccf-a12f-343217519d47",
			"key": "BASE_INVITE_URL",
			"value": "http://localhost:8000/invite",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}